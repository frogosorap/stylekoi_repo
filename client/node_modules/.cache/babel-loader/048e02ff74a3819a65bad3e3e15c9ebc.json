{"ast":null,"code":"import React, { useRef, useEffect, useState } from 'react';\nimport ReactDom from 'react-dom';\nimport cx from 'classnames';\nimport { disableBodyScroll, enableBodyScroll } from 'body-scroll-lock';\nimport useForwardedRef from '@bedrock-layout/use-forwarded-ref';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar CloseIcon = function CloseIcon(_ref) {\n  var classes = _ref.classes,\n      classNames = _ref.classNames,\n      styles = _ref.styles,\n      id = _ref.id,\n      closeIcon = _ref.closeIcon,\n      onClick = _ref.onClick;\n  return React.createElement(\"button\", {\n    id: id,\n    className: cx(classes.closeButton, classNames == null ? void 0 : classNames.closeButton),\n    style: styles == null ? void 0 : styles.closeButton,\n    onClick: onClick,\n    \"data-testid\": \"close-button\"\n  }, closeIcon ? closeIcon : React.createElement(\"svg\", {\n    className: classNames == null ? void 0 : classNames.closeIcon,\n    style: styles == null ? void 0 : styles.closeIcon,\n    width: 28,\n    height: 28,\n    viewBox: \"0 0 36 36\",\n    \"data-testid\": \"close-icon\"\n  }, React.createElement(\"path\", {\n    d: \"M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z\"\n  })));\n};\n\nvar isBrowser = typeof window !== 'undefined'; // https://github.com/alexandrzavalii/focus-trap-js/blob/master/src/index.js v1.1.0\n\nvar candidateSelectors = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable=\"false\"])'];\n\nfunction isHidden(node) {\n  // offsetParent being null will allow detecting cases where an element is invisible or inside an invisible element,\n  // as long as the element does not use position: fixed. For them, their visibility has to be checked directly as well.\n  return node.offsetParent === null || getComputedStyle(node).visibility === 'hidden';\n}\n\nfunction getCheckedRadio(nodes, form) {\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n}\n\nfunction isNotRadioOrTabbableRadio(node) {\n  if (node.tagName !== 'INPUT' || node.type !== 'radio' || !node.name) {\n    return true;\n  }\n\n  var radioScope = node.form || node.ownerDocument;\n  var radioSet = radioScope.querySelectorAll('input[type=\"radio\"][name=\"' + node.name + '\"]');\n  var checked = getCheckedRadio(radioSet, node.form);\n  return checked === node || checked === undefined && radioSet[0] === node;\n}\n\nfunction getAllTabbingElements(parentElem) {\n  var currentActiveElement = document.activeElement;\n  var tabbableNodes = parentElem.querySelectorAll(candidateSelectors.join(','));\n  var onlyTabbable = [];\n\n  for (var i = 0; i < tabbableNodes.length; i++) {\n    var node = tabbableNodes[i];\n\n    if (currentActiveElement === node || !node.disabled && getTabindex(node) > -1 && !isHidden(node) && isNotRadioOrTabbableRadio(node)) {\n      onlyTabbable.push(node);\n    }\n  }\n\n  return onlyTabbable;\n}\n\nfunction tabTrappingKey(event, parentElem) {\n  // check if current event keyCode is tab\n  if (!event || event.key !== 'Tab') return;\n\n  if (!parentElem || !parentElem.contains) {\n    if (process && process.env.NODE_ENV === 'development') {\n      console.warn('focus-trap-js: parent element is not defined');\n    }\n\n    return false;\n  }\n\n  if (!parentElem.contains(event.target)) {\n    return false;\n  }\n\n  var allTabbingElements = getAllTabbingElements(parentElem);\n  var firstFocusableElement = allTabbingElements[0];\n  var lastFocusableElement = allTabbingElements[allTabbingElements.length - 1];\n\n  if (event.shiftKey && event.target === firstFocusableElement) {\n    lastFocusableElement.focus();\n    event.preventDefault();\n    return true;\n  } else if (!event.shiftKey && event.target === lastFocusableElement) {\n    firstFocusableElement.focus();\n    event.preventDefault();\n    return true;\n  }\n\n  return false;\n}\n\nfunction getTabindex(node) {\n  var tabindexAttr = parseInt(node.getAttribute('tabindex'), 10);\n  if (!isNaN(tabindexAttr)) return tabindexAttr; // Browsers do not return tabIndex correctly for contentEditable nodes;\n  // so if they don't have a tabindex attribute specifically set, assume it's 0.\n\n  if (isContentEditable(node)) return 0;\n  return node.tabIndex;\n}\n\nfunction isContentEditable(node) {\n  return node.getAttribute('contentEditable');\n}\n\nvar FocusTrap = function FocusTrap(_ref) {\n  var container = _ref.container,\n      initialFocusRef = _ref.initialFocusRef;\n  var refLastFocus = useRef();\n  /**\r\n   * Handle focus lock on the modal\r\n   */\n\n  useEffect(function () {\n    var handleKeyEvent = function handleKeyEvent(event) {\n      if (container == null ? void 0 : container.current) {\n        tabTrappingKey(event, container.current);\n      }\n    };\n\n    if (isBrowser) {\n      document.addEventListener('keydown', handleKeyEvent);\n    } // On mount we focus on the first focusable element in the modal if there is one\n\n\n    if (isBrowser && (container == null ? void 0 : container.current)) {\n      var savePreviousFocus = function savePreviousFocus() {\n        // First we save the last focused element\n        // only if it's a focusable element\n        if (candidateSelectors.findIndex(function (selector) {\n          var _document$activeEleme;\n\n          return (_document$activeEleme = document.activeElement) == null ? void 0 : _document$activeEleme.matches(selector);\n        }) !== -1) {\n          refLastFocus.current = document.activeElement;\n        }\n      };\n\n      if (initialFocusRef) {\n        savePreviousFocus(); // We need to schedule focusing on a next frame - this allows to focus on the modal root\n\n        requestAnimationFrame(function () {\n          var _initialFocusRef$curr;\n\n          (_initialFocusRef$curr = initialFocusRef.current) == null ? void 0 : _initialFocusRef$curr.focus();\n        });\n      } else {\n        var allTabbingElements = getAllTabbingElements(container.current);\n\n        if (allTabbingElements[0]) {\n          savePreviousFocus();\n          allTabbingElements[0].focus();\n        }\n      }\n    }\n\n    return function () {\n      if (isBrowser) {\n        var _refLastFocus$current;\n\n        document.removeEventListener('keydown', handleKeyEvent); // On unmount we restore the focus to the last focused element\n\n        (_refLastFocus$current = refLastFocus.current) == null ? void 0 : _refLastFocus$current.focus();\n      }\n    };\n  }, [container, initialFocusRef]);\n  return null;\n};\n\nvar modals = [];\n/**\r\n * Handle the order of the modals.\r\n * Inspired by the material-ui implementation.\r\n */\n\nvar modalManager = {\n  /**\r\n   * Register a new modal\r\n   */\n  add: function add(newModal) {\n    modals.push(newModal);\n  },\n\n  /**\r\n   * Remove a modal\r\n   */\n  remove: function remove(oldModal) {\n    modals = modals.filter(function (modal) {\n      return modal !== oldModal;\n    });\n  },\n\n  /**\r\n   * When multiple modals are rendered will return true if current modal is the last one\r\n   */\n  isTopModal: function isTopModal(modal) {\n    return !!modals.length && modals[modals.length - 1] === modal;\n  }\n};\n\nfunction useModalManager(ref, open) {\n  useEffect(function () {\n    if (open) {\n      modalManager.add(ref);\n    }\n\n    return function () {\n      modalManager.remove(ref);\n    };\n  }, [open, ref]);\n}\n\nvar useScrollLock = function useScrollLock(refModal, open, showPortal, blockScroll, reserveScrollBarGap) {\n  var oldRef = useRef(null);\n  useEffect(function () {\n    if (open && refModal.current && blockScroll) {\n      oldRef.current = refModal.current;\n      disableBodyScroll(refModal.current, {\n        reserveScrollBarGap: reserveScrollBarGap\n      });\n    }\n\n    return function () {\n      if (oldRef.current) {\n        enableBodyScroll(oldRef.current);\n        oldRef.current = null;\n      }\n    };\n  }, [open, showPortal, refModal, blockScroll, reserveScrollBarGap]);\n};\n\nvar classes = {\n  root: 'react-responsive-modal-root',\n  overlay: 'react-responsive-modal-overlay',\n  overlayAnimationIn: 'react-responsive-modal-overlay-in',\n  overlayAnimationOut: 'react-responsive-modal-overlay-out',\n  modalContainer: 'react-responsive-modal-container',\n  modalContainerCenter: 'react-responsive-modal-containerCenter',\n  modal: 'react-responsive-modal-modal',\n  modalAnimationIn: 'react-responsive-modal-modal-in',\n  modalAnimationOut: 'react-responsive-modal-modal-out',\n  closeButton: 'react-responsive-modal-closeButton'\n};\nvar Modal =\n/*#__PURE__*/\nReact.forwardRef(function (_ref, ref) {\n  var _classNames$overlayAn, _classNames$overlayAn2, _classNames$modalAnim, _classNames$modalAnim2;\n\n  var open = _ref.open,\n      center = _ref.center,\n      _ref$blockScroll = _ref.blockScroll,\n      blockScroll = _ref$blockScroll === void 0 ? true : _ref$blockScroll,\n      _ref$closeOnEsc = _ref.closeOnEsc,\n      closeOnEsc = _ref$closeOnEsc === void 0 ? true : _ref$closeOnEsc,\n      _ref$closeOnOverlayCl = _ref.closeOnOverlayClick,\n      closeOnOverlayClick = _ref$closeOnOverlayCl === void 0 ? true : _ref$closeOnOverlayCl,\n      container = _ref.container,\n      _ref$showCloseIcon = _ref.showCloseIcon,\n      showCloseIcon = _ref$showCloseIcon === void 0 ? true : _ref$showCloseIcon,\n      closeIconId = _ref.closeIconId,\n      closeIcon = _ref.closeIcon,\n      _ref$focusTrapped = _ref.focusTrapped,\n      focusTrapped = _ref$focusTrapped === void 0 ? true : _ref$focusTrapped,\n      _ref$initialFocusRef = _ref.initialFocusRef,\n      initialFocusRef = _ref$initialFocusRef === void 0 ? undefined : _ref$initialFocusRef,\n      _ref$animationDuratio = _ref.animationDuration,\n      animationDuration = _ref$animationDuratio === void 0 ? 300 : _ref$animationDuratio,\n      classNames = _ref.classNames,\n      styles = _ref.styles,\n      _ref$role = _ref.role,\n      role = _ref$role === void 0 ? 'dialog' : _ref$role,\n      ariaDescribedby = _ref.ariaDescribedby,\n      ariaLabelledby = _ref.ariaLabelledby,\n      containerId = _ref.containerId,\n      modalId = _ref.modalId,\n      onClose = _ref.onClose,\n      onEscKeyDown = _ref.onEscKeyDown,\n      onOverlayClick = _ref.onOverlayClick,\n      onAnimationEnd = _ref.onAnimationEnd,\n      children = _ref.children,\n      reserveScrollBarGap = _ref.reserveScrollBarGap;\n  var refDialog = useForwardedRef(ref);\n  var refModal = useRef(null);\n  var refShouldClose = useRef(null);\n  var refContainer = useRef(null); // Lazily create the ref instance\n  // https://reactjs.org/docs/hooks-faq.html#how-to-create-expensive-objects-lazily\n\n  if (refContainer.current === null && isBrowser) {\n    refContainer.current = document.createElement('div');\n  } // The value should be false for srr, that way when the component is hydrated client side,\n  // it will match the server rendered content\n\n\n  var _useState = useState(false),\n      showPortal = _useState[0],\n      setShowPortal = _useState[1]; // Hook used to manage multiple modals opened at the same time\n\n\n  useModalManager(refModal, open); // Hook used to manage the scroll\n\n  useScrollLock(refModal, open, showPortal, blockScroll, reserveScrollBarGap);\n\n  var handleOpen = function handleOpen() {\n    if (refContainer.current && !container && !document.body.contains(refContainer.current)) {\n      document.body.appendChild(refContainer.current);\n    }\n\n    document.addEventListener('keydown', handleKeydown);\n  };\n\n  var handleClose = function handleClose() {\n    if (refContainer.current && !container && document.body.contains(refContainer.current)) {\n      document.body.removeChild(refContainer.current);\n    }\n\n    document.removeEventListener('keydown', handleKeydown);\n  };\n\n  var handleKeydown = function handleKeydown(event) {\n    // Only the last modal need to be escaped when pressing the esc key\n    if (event.keyCode !== 27 || !modalManager.isTopModal(refModal)) {\n      return;\n    }\n\n    onEscKeyDown == null ? void 0 : onEscKeyDown(event);\n\n    if (closeOnEsc) {\n      onClose();\n    }\n  };\n\n  useEffect(function () {\n    return function () {\n      if (showPortal) {\n        // When the modal is closed or removed directly, cleanup the listeners\n        handleClose();\n      }\n    };\n  }, [showPortal]);\n  useEffect(function () {\n    // If the open prop is changing, we need to open the modal\n    // This is also called on the first render if the open prop is true when the modal is created\n    if (open && !showPortal) {\n      setShowPortal(true);\n      handleOpen();\n    }\n  }, [open]);\n\n  var handleClickOverlay = function handleClickOverlay(event) {\n    if (refShouldClose.current === null) {\n      refShouldClose.current = true;\n    }\n\n    if (!refShouldClose.current) {\n      refShouldClose.current = null;\n      return;\n    }\n\n    onOverlayClick == null ? void 0 : onOverlayClick(event);\n\n    if (closeOnOverlayClick) {\n      onClose();\n    }\n\n    refShouldClose.current = null;\n  };\n\n  var handleModalEvent = function handleModalEvent() {\n    refShouldClose.current = false;\n  };\n\n  var handleAnimationEnd = function handleAnimationEnd() {\n    if (!open) {\n      setShowPortal(false);\n    }\n\n    onAnimationEnd == null ? void 0 : onAnimationEnd();\n  };\n\n  var containerModal = container || refContainer.current;\n  var overlayAnimation = open ? (_classNames$overlayAn = classNames == null ? void 0 : classNames.overlayAnimationIn) != null ? _classNames$overlayAn : classes.overlayAnimationIn : (_classNames$overlayAn2 = classNames == null ? void 0 : classNames.overlayAnimationOut) != null ? _classNames$overlayAn2 : classes.overlayAnimationOut;\n  var modalAnimation = open ? (_classNames$modalAnim = classNames == null ? void 0 : classNames.modalAnimationIn) != null ? _classNames$modalAnim : classes.modalAnimationIn : (_classNames$modalAnim2 = classNames == null ? void 0 : classNames.modalAnimationOut) != null ? _classNames$modalAnim2 : classes.modalAnimationOut;\n  return showPortal && containerModal ? ReactDom.createPortal(React.createElement(\"div\", {\n    className: cx(classes.root, classNames == null ? void 0 : classNames.root),\n    style: styles == null ? void 0 : styles.root,\n    \"data-testid\": \"root\"\n  }, React.createElement(\"div\", {\n    className: cx(classes.overlay, classNames == null ? void 0 : classNames.overlay),\n    \"data-testid\": \"overlay\",\n    \"aria-hidden\": true,\n    style: _extends({\n      animation: overlayAnimation + \" \" + animationDuration + \"ms\"\n    }, styles == null ? void 0 : styles.overlay)\n  }), React.createElement(\"div\", {\n    ref: refModal,\n    id: containerId,\n    className: cx(classes.modalContainer, center && classes.modalContainerCenter, classNames == null ? void 0 : classNames.modalContainer),\n    style: styles == null ? void 0 : styles.modalContainer,\n    \"data-testid\": \"modal-container\",\n    onClick: handleClickOverlay\n  }, React.createElement(\"div\", {\n    ref: refDialog,\n    className: cx(classes.modal, classNames == null ? void 0 : classNames.modal),\n    style: _extends({\n      animation: modalAnimation + \" \" + animationDuration + \"ms\"\n    }, styles == null ? void 0 : styles.modal),\n    onMouseDown: handleModalEvent,\n    onMouseUp: handleModalEvent,\n    onClick: handleModalEvent,\n    onAnimationEnd: handleAnimationEnd,\n    id: modalId,\n    role: role,\n    \"aria-modal\": \"true\",\n    \"aria-labelledby\": ariaLabelledby,\n    \"aria-describedby\": ariaDescribedby,\n    \"data-testid\": \"modal\",\n    tabIndex: -1\n  }, focusTrapped && React.createElement(FocusTrap, {\n    container: refDialog,\n    initialFocusRef: initialFocusRef\n  }), children, showCloseIcon && React.createElement(CloseIcon, {\n    classes: classes,\n    classNames: classNames,\n    styles: styles,\n    closeIcon: closeIcon,\n    onClick: onClose,\n    id: closeIconId\n  })))), containerModal) : null;\n});\nexport default Modal;\nexport { Modal };","map":null,"metadata":{},"sourceType":"module"}