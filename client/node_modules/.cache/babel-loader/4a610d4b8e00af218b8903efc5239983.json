{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\milas\\\\OneDrive - Dundalk Institute of Technology\\\\Year 2\\\\Full Stack Development\\\\stylekoi_repo\\\\client\\\\src\\\\components\\\\BuyCar.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Redirect } from \"react-router-dom\";\nimport { SANDBOX_CLIENT_ID, SERVER_HOST } from \"../config/global_constants\";\nimport PayPalMessage from \"./PayPalMessage\";\nimport { PayPalButtons, PayPalScriptProvider } from \"@paypal/react-paypal-js\";\nexport default class BuyCar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.createOrder = (data, actions) => {\n      // Extract form details from localStorage\n      const orderName = localStorage.getItem(\"orderName\");\n      const orderEmail = localStorage.getItem(\"orderEmail\");\n      const address = localStorage.getItem(\"address\");\n      const phone = localStorage.getItem(\"phone\"); // Prepare data to be sent to the server\n\n      const formData = new FormData();\n      formData.append(\"orderName\", orderName);\n      formData.append(\"orderEmail\", orderEmail);\n      formData.append(\"address\", address);\n      formData.append(\"phone\", phone); // Create the order with item details and form details\n\n      return actions.order.create({\n        purchase_units: [{\n          amount: {\n            value: this.props.price\n          },\n          // Include form details in the custom_id field or any other field\n          custom_id: JSON.stringify({\n            orderName,\n            orderEmail,\n            address,\n            phone\n          })\n        }]\n      });\n    };\n\n    this.onApprove = paymentData => {\n      axios.post(\"\".concat(SERVER_HOST, \"/sales/\").concat(paymentData.orderID, \"/\").concat(this.props.carID, \"/\").concat(this.props.price), formData, {\n        headers: {\n          \"authorization\": localStorage.token,\n          \"Content-type\": \"multipart/form-data\"\n        }\n      }).then(res => {\n        this.setState({\n          payPalMessageType: PayPalMessage.messageType.SUCCESS,\n          payPalOrderID: paymentData.orderID,\n          redirectToPayPalMessage: true\n        });\n      }).catch(errorData => {\n        this.setState({\n          payPalMessageType: PayPalMessage.messageType.ERROR,\n          redirectToPayPalMessage: true\n        });\n      });\n    };\n\n    this.onError = errorData => {\n      this.setState({\n        payPalMessageType: PayPalMessage.messageType.ERROR,\n        redirectToPayPalMessage: true\n      });\n    };\n\n    this.onCancel = cancelData => {\n      // The user pressed the Paypal checkout popup window cancel button or closed the Paypal checkout popup window\n      this.setState({\n        payPalMessageType: PayPalMessage.messageType.CANCEL,\n        redirectToPayPalMessage: true\n      });\n    };\n\n    this.state = {\n      redirectToPayPalMessage: false,\n      payPalMessageType: null,\n      payPalOrderID: null\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"paypal-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, this.state.redirectToPayPalMessage ? React.createElement(Redirect, {\n      to: \"/PayPalMessage/\".concat(this.state.payPalMessageType, \"/\").concat(this.state.payPalOrderID),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }) : null, React.createElement(PayPalScriptProvider, {\n      options: {\n        currency: \"EUR\",\n        \"client-id\": SANDBOX_CLIENT_ID\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(PayPalButtons, {\n      style: {\n        layout: \"horizontal\"\n      },\n      createOrder: this.createOrder,\n      onApprove: this.onApprove,\n      onError: this.onError,\n      onCancel: this.onCancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\milas\\OneDrive - Dundalk Institute of Technology\\Year 2\\Full Stack Development\\stylekoi_repo\\client\\src\\components\\BuyCar.js"],"names":["React","Component","axios","Redirect","SANDBOX_CLIENT_ID","SERVER_HOST","PayPalMessage","PayPalButtons","PayPalScriptProvider","BuyCar","constructor","props","createOrder","data","actions","orderName","localStorage","getItem","orderEmail","address","phone","formData","FormData","append","order","create","purchase_units","amount","value","price","custom_id","JSON","stringify","onApprove","paymentData","post","orderID","carID","headers","token","then","res","setState","payPalMessageType","messageType","SUCCESS","payPalOrderID","redirectToPayPalMessage","catch","errorData","ERROR","onError","onCancel","cancelData","CANCEL","state","render","currency","layout"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\r\nimport axios from \"axios\"\r\nimport { Redirect } from \"react-router-dom\"\r\n\r\nimport { SANDBOX_CLIENT_ID, SERVER_HOST } from \"../config/global_constants\"\r\nimport PayPalMessage from \"./PayPalMessage\"\r\nimport { PayPalButtons, PayPalScriptProvider } from \"@paypal/react-paypal-js\"\r\n\r\nexport default class BuyCar extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            redirectToPayPalMessage: false,\r\n            payPalMessageType: null,\r\n            payPalOrderID: null\r\n        }\r\n    }\r\n\r\n    createOrder = (data, actions) => {\r\n        // Extract form details from localStorage\r\n        const orderName = localStorage.getItem(\"orderName\");\r\n        const orderEmail = localStorage.getItem(\"orderEmail\");\r\n        const address = localStorage.getItem(\"address\");\r\n        const phone = localStorage.getItem(\"phone\");\r\n    \r\n        // Prepare data to be sent to the server\r\n        const formData = new FormData();\r\n        formData.append(\"orderName\", orderName);\r\n        formData.append(\"orderEmail\", orderEmail);\r\n        formData.append(\"address\", address);\r\n        formData.append(\"phone\", phone);\r\n    \r\n        // Create the order with item details and form details\r\n        return actions.order.create({\r\n            purchase_units: [{\r\n                amount: { value: this.props.price },\r\n                // Include form details in the custom_id field or any other field\r\n                custom_id: JSON.stringify({ orderName, orderEmail, address, phone })\r\n            }]\r\n        });\r\n    }\r\n\r\n    onApprove = (paymentData) => {\r\n        \r\n        axios.post(\r\n            `${SERVER_HOST}/sales/${paymentData.orderID}/${this.props.carID}/${this.props.price}`,formData, { headers: { \"authorization\": localStorage.token, \"Content-type\": \"multipart/form-data\" } })\r\n            .then(res => {\r\n                this.setState({\r\n                    payPalMessageType: PayPalMessage.messageType.SUCCESS,\r\n                    payPalOrderID: paymentData.orderID,\r\n                    redirectToPayPalMessage: true\r\n                })\r\n            })\r\n            .catch(errorData => {\r\n                this.setState({\r\n                    payPalMessageType: PayPalMessage.messageType.ERROR,\r\n                    redirectToPayPalMessage: true\r\n                })\r\n            })\r\n    }\r\n\r\n\r\n    onError = errorData => {\r\n        this.setState({\r\n            payPalMessageType: PayPalMessage.messageType.ERROR,\r\n            redirectToPayPalMessage: true\r\n        })\r\n    }\r\n\r\n\r\n    onCancel = cancelData => {\r\n        // The user pressed the Paypal checkout popup window cancel button or closed the Paypal checkout popup window\r\n        this.setState({\r\n            payPalMessageType: PayPalMessage.messageType.CANCEL,\r\n            redirectToPayPalMessage: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"paypal-button\">\r\n                {this.state.redirectToPayPalMessage ? <Redirect to={`/PayPalMessage/${this.state.payPalMessageType}/${this.state.payPalOrderID}`} /> : null}\r\n\r\n                <PayPalScriptProvider options={{ currency: \"EUR\", \"client-id\": SANDBOX_CLIENT_ID }}>\r\n                    <PayPalButtons style={{ layout: \"horizontal\" }} createOrder={this.createOrder} onApprove={this.onApprove} onError={this.onError} onCancel={this.onCancel} />\r\n                </PayPalScriptProvider>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}